generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  emailVerified  DateTime?
  password       String
  displayName    String
  pictureUrl     String?
  role           String?         @default("user")
  orders         Order[]
  addresses      Address[]
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("users")
}

model Order {
  id         String      @id @default(uuid())
  date       DateTime    @default(now())
  status     String
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  @@map("orders")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float

  @@map("order_items")
}

model Address {
  id     String @id @default(uuid())
  street String
  city   String
  zip    String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Payment {
  id      String   @id @default(uuid())
  orderId String   @unique
  order   Order    @relation(fields: [orderId], references: [id])
  amount  Float
  date    DateTime @default(now())
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}
